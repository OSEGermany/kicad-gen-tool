#!/usr/bin/env bash
# Copyright (C) 2020, Robin Vobruba <hoijui.quaero@gmail.com>
# Licensed under the GPL v3, see LICENSE-GPLv3.md.
#
# See the output of "$0 -h" for more details.
#
# Dependencies:
# $ pip install pcb-tools


# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
#set -Eeuo pipefail
set -Eeu

script_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
# shellcheck source=./_shared_git
#source "$script_dir/_shared_git"

# initial default values
APP_NAME="Gerber Generator"
plot_gerber_py="${script_dir}/plot_gerber.py"
render_pcb_py="${script_dir}/render_pcb.py"

function print_help() {

	script_name="$(basename "$0")"
	echo "${APP_NAME} - Generates Gerber, drill files and renders,"
	echo "with a KiCad PCB file as input."
	echo "NOTE: This script depends on 2 python scripts and their dependencies."
	echo
	echo "Usage:"
	echo "  $script_name [OPTIONS] <local-repo-dir>"
	echo "Options:"
	echo "  -h, --help              Show this help message"
	echo "  -n, --name <string>     Project name (prefferably without spaces)"
	echo "  -v, --version <string>  Project version (prefferably without spaces)"
	echo "  --build-date <string>   Date at which the currently being-made build of the project is made"
	echo "                          This shold basically always be left on the default,"
	echo "                          which is the current date."
	echo "Examples:"
	echo "  $0"
	echo "  $0 -n my-proj -v 1.2.0"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="${1}"
	shift # $2 -> $1, $3 -> $2, ...

	case "${arg}" in
		-h|--help)
			print_help
			exit 0
			;;
		-n|--name)
			project_name="$1"
			shift # past argument
			;;
		-v|--version)
			project_version="$1"
			shift # past argument
			;;
		--build-date)
			project_build_date="$1"
			shift # past argument
			;;
		*) # non-/unknown option
			POSITIONAL+=("${arg}") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

root_dir="${1:-$(pwd)}"
root_dir_abs="$(cd "$root_dir"; pwd)"
build_root="${root_dir}/build"
gen_src_root="${build_root}/gen-src"
gerbers_root="${build_root}/gerbers"
assets_root="${build_root}/assets"
project_name="${project_name:-$(cd "$root_dir"; basename "$(pwd)")}"
project_version="${project_version:-$("${script_dir}/git-version" -e "$root_dir")}"
date="$(date +'%Y-%m-%d')"

if [ -z "$project_name" ]
then
	>&2 echo "WARNING: No project name given!"
	print_help
	exit 1
fi
if [ -z "$project_version" ]
then
	>&2 echo "WARNING: No project version given!"
	print_help
	exit 1
fi

mkdir -p "${gen_src_root}"
mkdir -p "${gerbers_root}"
mkdir -p "${assets_root}"

# Recursive KiCad PCB file search
# (with wall-clock time meassurement)
# (all tracked and untracked, un(git)ignored files
#for pcb in {**,.}/*.kicad_pcb
time \
	( git -C "$root_dir_abs" status --short \
		| grep '^?' \
		| cut -d\  -f2- \
		&& git -C "$root_dir_abs" ls-files ) \
	| sort -u \
	| ( xargs -d '\n' -- stat -c%n 2>/dev/null  ||: ) \
	| grep "\.kicad_pcb\$" \
	| while read -r pcb
do
	pcb="${pcb#\.\/}"
	base_name="$(basename --suffix=".kicad_pcb" "$pcb")"
	dir_name="$(dirname "$pcb")"
	dir_name="${dir_name#\.\/}"
	# Recreate generated file-name
	pcb_gen="${gen_src_root}/${pcb}"
	# Fail if generated version does not exist
	if [ ! -f "$pcb_gen" ]
	then
		>&2 echo "WARNING: Generated PCB version not found: '$pcb_gen'"
		exit 1
	fi
	gerbers_dir="${gerbers_root}/${dir_name}/$base_name"
	assets_dir="${assets_root}/${dir_name}"
	dir_name_flat="$(echo "$dir_name" | sed -e 's|^./||' -e 's|/|-|')"
	gerbers_file="${gerbers_root}/${project_name}-${dir_name_flat}-${base_name}-gerbers-${project_version}-${date}.zip"
	render_base_path="${assets_dir}/$base_name"
	mkdir -p "$gerbers_dir"
	mkdir -p "$assets_dir"

	echo "Generating Gerber and drill files for '$pcb' ..."
	python "$plot_gerber_py" "$pcb_gen" "$gerbers_dir" "$gerbers_file"

	echo "Generating PNG renders of PCB (from Gerber files) for '$base_name' ..."
	python "$render_pcb_py" "$gerbers_file" "$render_base_path"
done
echo "done."
